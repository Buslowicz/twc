import { expect } from "chai";
import { readFileSync } from "fs";
import Module from "../src/PolymerModule";

describe("module builder", () => {
  function moduleTests(esVersion: number) {
    return () => {
      let inputMathMeta: Module;
      let elementNameMeta: Module;
      before(() => {
        inputMathMeta = new Module(
          readFileSync(`${__dirname}/assets/es${esVersion}out/input-math.d.ts`, "utf8"),
          readFileSync(`${__dirname}/assets/es${esVersion}out/input-math.js`, "utf8")
        );

        elementNameMeta = new Module(
          readFileSync(`${__dirname}/assets/es${esVersion}out/element-name.d.ts`, "utf8"),
          readFileSync(`${__dirname}/assets/es${esVersion}out/element-name.js`, "utf8")
        );
      });

      it("should generate a valid Polymer v1 module", () => {
        expect(inputMathMeta.toString(1)).to.be.equal(esVersion === 5 ?
          [
            `<script src="bower_components/jquery/jquery.js"></script>`,
            `<script src="bower_components/mathquill/mathquill.js"></script>`,
            `<dom-module id="input-math">`,
            `    <template>`,
            `        <input>`,
            `    </template>`,
            `    <script>`,
            `        Polymer({`,
            `            is: "input-math",`,
            `            properties: {`,
            `                testValue: {`,
            `                    type: String`,
            `                },`,
            `                value: {`,
            `                    type: String,`,
            `                    value: "",`,
            `                    reflectToAttribute: true,`,
            `                    observer: "valueChanged"`,
            `                },`,
            `                symbols: {`,
            `                    type: Array,`,
            `                    value: [`,
            `                        InputMath_1.SYMBOLS_BASIC,`,
            `                        InputMath_1.SYMBOLS_GREEK`,
            `                    ],`,
            `                    notify: true`,
            `                },`,
            `                showSymbols: {`,
            `                    type: String,`,
            `                    value: "",`,
            `                    observer: "symbolsChanged"`,
            `                },`,
            `                fn: {`,
            `                    type: Object,`,
            `                    value: function() {`,
            `                        return typeof window;`,
            `                    }`,
            `                }`,
            `            },`,
            `            ,`,
            `            constructor: function() {`,
            `                var _this = _super.call(this) || this;`,
            `                var editor = _this._editor;`,
            `                editor.id = "editor";`,
            `                editor.classList.add(_this.is);`,
            `                _this["_mathField"] = MathQuill.getInterface(2).MathField(editor, {`,
            `                    spaceBehavesLikeTab: true,`,
            `                    handlers: {`,
            `                        edit: _this._updateValue.bind(_this)`,
            `                    }`,
            `                });`,
            `                return _this;`,
            `            },`,
            `            ready: function() {`,
            `                this.insertBefore(this._editor, this.$.controls);`,
            `            },`,
            `            cmd: function(ev) {`,
            `                this._mathField.cmd(ev.model.item.cmd).focus();`,
            `            },`,
            `            undo: function() {`,
            `                if (this._history && this._history.length > 0) {`,
            `                    this._freezeHistory = true;`,
            `                    this.value = this._history.pop();`,
            `                    this._freezeHistory = false;`,
            `                }`,
            `            },`,
            `            valueChanged: function(value, prevValue) {`,
            `                this._updateHistory(prevValue);`,
            `                if (this._observerLocked) {`,
            `                    return;`,
            `                }`,
            `                this._mathField.select().write(value);`,
            `                if (this._mathField.latex() === "") {`,
            `                    this.undo();`,
            `                }`,
            `            },`,
            `            symbolsChanged: function(symbols) {`,
            `                if (symbols) {`,
            `                    this.symbols = symbols.split(",").map(function(groupName) {`,
            `                        return InputMath_1["SYMBOLS_" + groupName.toUpperCase()] || [];`,
            `                    });`,
            `                }`,
            `            },`,
            `            keyShortcuts: function(ev) {`,
            `                if (ev.ctrlKey && ev.keyCode === 90) {`,
            `                    this.undo();`,
            `                }`,
            `            },`,
            `            _updateValue: function(test) {`,
            `                console.log(test);`,
            `                this._observerLocked = true;`,
            `                this.value = this._mathField.latex();`,
            `                this._observerLocked = false;`,
            `            },`,
            `            _updateHistory: function(prevValue) {`,
            `                if (!this._history) {`,
            `                    this._history = [];`,
            `                }`,
            `                if (this._freezeHistory || prevValue == null) {`,
            `                    return;`,
            `                }`,
            `                this._history.push(prevValue);`,
            `                if (this._history.length > InputMath_1.HISTORY_SIZE) {`,
            `                    this._history.shift();`,
            `                }`,
            `            }`,
            `        });`,
            `    </script>`,
            `</dom-module>`
          ].join("\n")
          :
          [
            `<script src="bower_components/jquery/jquery.js"></script>`,
            `<script src="bower_components/mathquill/mathquill.js"></script>`,
            `<dom-module id="input-math">`,
            `    <template>`,
            `        <input>`,
            `    </template>`,
            `    <script>`,
            `        Polymer({`,
            `            is: "input-math",`,
            `            properties: {`,
            `                testValue: {`,
            `                    type: String`,
            `                },`,
            `                value: {`,
            `                    type: String,`,
            `                    value: "",`,
            `                    reflectToAttribute: true,`,
            `                    observer: "valueChanged"`,
            `                },`,
            `                symbols: {`,
            `                    type: Array,`,
            `                    value: [`,
            `                        InputMath_1.SYMBOLS_BASIC,`,
            `                        InputMath_1.SYMBOLS_GREEK`,
            `                    ],`,
            `                    notify: true`,
            `                },`,
            `                showSymbols: {`,
            `                    type: String,`,
            `                    value: "",`,
            `                    observer: "symbolsChanged"`,
            `                },`,
            `                fn: {`,
            `                    type: Object,`,
            `                    value: function() {`,
            `                        return typeof window;`,
            `                    }`,
            `                }`,
            `            },`,
            `            ,`,
            `            constructor: function() {`,
            `                super();`,
            `                var editor = this._editor;`,
            `                editor.id = "editor";`,
            `                editor.classList.add(this.is);`,
            `                this["_mathField"] = MathQuill.getInterface(2).MathField(editor, {`,
            `                    spaceBehavesLikeTab: true,`,
            `                    handlers: {`,
            `                        edit: this._updateValue.bind(this)`,
            `                    }`,
            `                });`,
            `            },`,
            `            ready: function() {`,
            `                this.insertBefore(this._editor, this.$.controls);`,
            `            },`,
            `            cmd: function(ev) {`,
            `                this._mathField.cmd(ev.model.item.cmd).focus();`,
            `            },`,
            `            undo: function() {`,
            `                if (this._history && this._history.length > 0) {`,
            `                    this._freezeHistory = true;`,
            `                    this.value = this._history.pop();`,
            `                    this._freezeHistory = false;`,
            `                }`,
            `            },`,
            `            valueChanged: function(value, prevValue) {`,
            `                this._updateHistory(prevValue);`,
            `                if (this._observerLocked) {`,
            `                    return;`,
            `                }`,
            `                this._mathField.select().write(value);`,
            `                if (this._mathField.latex() === "") {`,
            `                    this.undo();`,
            `                }`,
            `            },`,
            `            symbolsChanged: function(symbols) {`,
            `                if (symbols) {`,
            `                    this.symbols = symbols.split(",").map(groupName => {`,
            `                        return InputMath_1["SYMBOLS_" + groupName.toUpperCase()] || [];`,
            `                    });`,
            `                }`,
            `            },`,
            `            keyShortcuts: function(ev) {`,
            `                if (ev.ctrlKey && ev.keyCode === 90) {`,
            `                    this.undo();`,
            `                }`,
            `            },`,
            `            _updateValue: function(test) {`,
            `                console.log(test);`,
            `                this._observerLocked = true;`,
            `                this.value = this._mathField.latex();`,
            `                this._observerLocked = false;`,
            `            },`,
            `            _updateHistory: function(prevValue) {`,
            `                if (!this._history) {`,
            `                    this._history = [];`,
            `                }`,
            `                if (this._freezeHistory || prevValue == null) {`,
            `                    return;`,
            `                }`,
            `                this._history.push(prevValue);`,
            `                if (this._history.length > InputMath_1.HISTORY_SIZE) {`,
            `                    this._history.shift();`,
            `                }`,
            `            }`,
            `        });`,
            `    </script>`,
            `</dom-module>`
          ].join("\n")
        );
        expect(elementNameMeta.toString(1)).to.equal([
          `<link rel="import" href="bower_components/polymer/polymer.html">`,
          `<link rel="import" href="node_modules/easy-polymer/dist/esp.html">`,
          `<dom-module id="element-name">`,
          `    <template>`,
          `        <h1>tester: [[test]]</h1>`,
          `    </template>`,
          `    <script>`,
          `        Polymer({`,
          `            is: "element-name",`,
          `            properties: {`,
          `                greetings: {`,
          `                    type: Array,`,
          `                    reflectToAttribute: true,`,
          `                    observer: "observerAuto"`,
          `                },`,
          `                test: {`,
          `                    type: String,`,
          `                    value: "tester",`,
          `                    readOnly: true`,
          `                },`,
          `                profile: {`,
          `                    type: Object,`,
          `                    notify: true`,
          `                },`,
          `                computedProp: {`,
          `                    type: String,`,
          `                    computed: "_computeComputedprop(test)"`,
          `                },`,
          `                computedPropAuto: {`,
          `                    type: String,`,
          `                    computed: "_computeComputedpropauto(test)"`,
          `                }`,
          `            },`,
          `            observers: ["observer(profile.prop)"],`,
          `            observer: function(val) {`,
          `                console.log("val:", val);`,
          `            },`,
          `            observerAuto: function(greetings) {`,
          `                console.log("greetings:", greetings);`,
          `            },`,
          `            _computeComputedprop: function(val) {`,
          `                console.log(val);`,
          `                return val + "!";`,
          `            },`,
          `            _computeComputedpropauto: function(test) {`,
          `                console.log("test:", test);`,
          `                return test + "!";`,
          `            }`,
          `        });`,
          `    </script>`,
          `</dom-module>`
        ].join("\n"));
      });
    }
  }

  describe("ES5", moduleTests(5));
  describe("ES6", moduleTests(6));
});
